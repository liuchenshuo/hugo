<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lcs</title>
    <link>http://liuchenshuo.com/</link>
    <description>Recent content on Lcs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 01 Oct 2022 09:52:51 +0200</lastBuildDate><atom:link href="http://liuchenshuo.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>es5规范以及DOM规范--07-2 标准库</title>
      <link>http://liuchenshuo.com/2022/10/01/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-07-2-%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Sat, 01 Oct 2022 09:52:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/10/01/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-07-2-%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;07-2 标准库  学习参考链接 https://wangdoc.com/javascript/stdlib/index.html
 标准库主要对象
  Object 对象
  属性描述对象
  Array 对象
  包装对象
  Boolean 对象
  Number 对象
  String 对象
  Math 对象
  Date 对象
  RegExp 对象
  JSON 对象
  包装对象 对象是 JavaScript 语言最主要的数据类型，三种原始类型的值——数值、字符串、布尔值——在一定条件下，也会自动转为对象，也就是原始类型的“包装对象”（wrapper）。
所谓“包装对象”，指的是与数值、字符串、布尔值分别相对应的Number、String、Boolean三个原生对象。这三个原生对象可以把原始类型的值变成（包装成）对象。
包装对象的设计目的，首先是使得“对象”这种类型可以覆盖 JavaScript 所有的值，整门语言有一个通用的数据模型，其次是使得原始类型的值也有办法调用自己的方法。
某些场合，原始类型的值会自动当作包装对象调用，即调用包装对象的属性和方法。这时，JavaScript 引擎会自动将原始类型的值转为包装对象实例，并在使用后立刻销毁实例。
// valueOf() 方法new String(&#39;abc&#39;).valueOf() // &amp;quot;abc&amp;quot;// toString() 方法new String(&#39;abc&#39;).</description>
    </item>
    
    <item>
      <title>js相关语法详解--01 call()、apply()、bind()语法</title>
      <link>http://liuchenshuo.com/2022/09/11/js%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3-01-callapplybind%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 11 Sep 2022 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/09/11/js%E7%9B%B8%E5%85%B3%E8%AF%AD%E6%B3%95%E8%AF%A6%E8%A7%A3-01-callapplybind%E8%AF%AD%E6%B3%95/</guid>
      <description>js相关语法详解&amp;ndash;01 call()、apply()、bind()语法  学习参考链接：前置学习函数解释 https://www.w3school.com.cn/js/js_function_invocation.asp
学习参考链接：call() 语法学习 https://www.w3school.com.cn/js/js_function_call.asp
学习参考链接：Apply() 语法学习 https://www.w3school.com.cn/js/js_function_call.asp
学习参考链接：比较好的语法解释 https://blog.csdn.net/wkl115211/article/details/80255967
学习参考链接：比较好的示例 https://www.runoob.com/w3cnote/js-call-apply-bind.html
 一般来说，call()、apply()、bind() 三个方法都是一起介绍，因为用法类似，只是有细微差距。
所有函数（这里说的函数是指对象以及对象的方法）都具有call()、apply()、bind() 三个方法。他们可以在执行方法时候用一个值指向this，并改变面向对象的作用域。
call() 语法   call() 方法是预定义的 JavaScript 方法。
  它可以用来调用所有者对象作为参数的方法。
  通过 call()，您能够使用属于另一个对象的方法。
  call() 方法可接受参数。
  示例：
// 定义一个 person 对象var person = {firstName:&amp;quot;Bill&amp;quot;,lastName: &amp;quot;Gates&amp;quot;,fullNameWithAge: function (age) {return this.firstName + &amp;quot; &amp;quot; + this.lastName+ &amp;quot;, age: &amp;quot; + age;}}// 执行对象内部函数person.</description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范--06 编程风格（个人）</title>
      <link>http://liuchenshuo.com/2022/09/10/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-06-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E4%B8%AA%E4%BA%BA/</link>
      <pubDate>Sat, 10 Sep 2022 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/09/10/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-06-%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E4%B8%AA%E4%BA%BA/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;06 编程风格（个人）  学习参考链接 https://wangdoc.com/javascript/features/style.html
 编程风格（根据个人喜好总结）   缩进：使用tab缩进。
  区块：使用大括号划分可能引起歧义的区块。同时为了防止自动添加句末分号引起的问题，推荐区块起首的大括号位置跟在关键字的后面。
block {// ...}  圆括号：在 JavaScript 中有两种作用，一种表示函数的调用，另一种表示表达式的组合（grouping）。
为了方便区分，最好遵循如下约束
 表示函数调用时，函数名与左括号之间没有空格。 表示函数定义时，函数名与左括号之间没有空格。 其他情况时，前面位置的语法元素与左括号之间，都有一个空格。  foo(bar) // 函数定义return (a+b); // 返回值if (a === 0) {...} // 判断条件function foo(b) {...} // 函数调用  行尾的分号：一般不要省略，除非语法规定本来就不需要在结尾添加分号。例如判断、循环、函数定义等。
  全局变量：使用全大写加下划线定义方式 UPPER_CASE
  with语句：尽量不使用，由于大量使用with语句会导致性能的下降，同时也会给代码的调试造成困难，因此在开发大型应用程序的时候，不建议使用with语句。
语法：with (expression) statement
示例：
定义with语句的目的主要是为了简化多次编写同一个对象的工作，如下面的例子
var qs = location.search.substring(1);var hostName=location.</description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范--07-1 标准库</title>
      <link>http://liuchenshuo.com/2022/09/10/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-07-1-%E6%A0%87%E5%87%86%E5%BA%93/</link>
      <pubDate>Sat, 10 Sep 2022 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/09/10/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-07-1-%E6%A0%87%E5%87%86%E5%BA%93/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;07-1 标准库  学习参考链接 https://wangdoc.com/javascript/stdlib/index.html
 标准库主要对象
  Object 对象
  属性描述对象
  Array 对象
  包装对象
  Boolean 对象
  Number 对象
  String 对象
  Math 对象
  Date 对象
  RegExp 对象
  JSON 对象
  Object对象   重要静态方法 Object.keys
Object.keys方法和Object.getOwnPropertyNames方法都用来遍历对象的属性。
一般两者相同，只有涉及不可枚举属性时，才会有不一样的结果。Object.keys方法只返回可枚举的属性，Object.getOwnPropertyNames方法返回不可枚举的属性名。
示例：
var a = [&#39;Hello&#39;, &#39;World&#39;];Object.keys(a) // [&amp;quot;0&amp;quot;, &amp;quot;1&amp;quot;]Object.</description>
    </item>
    
    <item>
      <title>安卓app开发技术</title>
      <link>http://liuchenshuo.com/2022/08/20/%E5%AE%89%E5%8D%93app%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 20 Aug 2022 21:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/08/20/%E5%AE%89%E5%8D%93app%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</guid>
      <description>安卓app开发技术 这里主要考虑当前比较成熟的几个跨平台方案
 flutter react-native uni-app  总体对比可以参考：https://www.zhihu.com/question/514074001/answer/2585060251
因为博主本身技术偏向 react ，这里主要以 react-native 作为研究
react-native 官网：https://www.reactnative.cn/
当前 react-native还没有正式1.0 版本，还在演进中，最新动态说明：https://juejin.cn/post/7063738658913779743
简介 React Native使你能够在Javascript和 React的基础上获得完全一致的开发体验，构建世界一流的原生APP。React Native着力于提高多平台开发的开发效率 —— 仅需学习一次，编写任何平台。(Learn once, write anywhere) Facebook已经在多项产品中使用了React Native，并且将持续地投入建设React Native。</description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范--05 语法介绍</title>
      <link>http://liuchenshuo.com/2022/08/20/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-05-%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Aug 2022 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/08/20/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-05-%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;05 语法介绍  学习参考链接 https://wangdoc.com/javascript/features/conversion.html
 数据类型的转换 JavaScript 是一种动态类型语言，变量没有类型限制，可以随时赋予任意值。
var x = y ? 1 : &#39;a&#39;;强制转换方法 强制转换主要指使用
  Number()：转换数字
  String()：转换字符串
  Boolean()：转换布尔值
  注意：Boolean()函数可以将任意类型的值转为布尔值。
它的转换规则相对简单：除了以下五个值的转换结果为false，其他的值全部为true。
 undefined null 0（包含-0和+0） NaN &#39;&#39;（空字符串）  由于自动转换具有不确定性，而且不易除错，建议在预期为布尔值、数值、字符串的地方，全部使用Boolean()、Number()和String()函数进行显式转换。
错误处理机制 常见错误类型
  SyntaxError对象是解析代码时发生的语法错误
  ReferenceError对象是引用一个不存在的变量时发生的错误。
  RangeError对象是一个值超出有效范围时发生的错误。主要有几种情况，一是数组长度为负数，二是Number对象的方法参数超出范围，以及函数堆栈超过最大值。
  TypeError对象是变量或参数不是预期类型时发生的错误。比如，对字符串、布尔值、数值等原始类型的值使用new命令，就会抛出这种错误，因为new命令的参数应该是一个构造函数。
  URIError对象是 URI 相关函数的参数不正确时抛出的错误，主要涉及encodeURI()、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和unescape()这六个函数。
  eval函数没有被正确执行时，会抛出EvalError错误。该错误类型已经不再使用了，只是为了保证与以前代码兼容，才继续保留。
  eval() 函数计算或执行参数。
如果参数是表达式，则 eval() 计算表达式。如果参数是一个或多个 JavaScript 语句，则 eval() 执行这些语句。</description>
    </item>
    
    <item>
      <title>开源聊天室 RocketChat 安装</title>
      <link>http://liuchenshuo.com/2022/01/02/%E5%BC%80%E6%BA%90%E8%81%8A%E5%A4%A9%E5%AE%A4-rocketchat-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 02 Jan 2022 12:10:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/01/02/%E5%BC%80%E6%BA%90%E8%81%8A%E5%A4%A9%E5%AE%A4-rocketchat-%E5%AE%89%E8%A3%85/</guid>
      <description>开源聊天室 RocketChat 安装 参考资料
 官方使用Docker 部署说明 https://hub.docker.com/_/rocket-chat
  官网：https://rocket.chat/
  git 地址：https://github.com/RocketChat/Rocket.Chat#docker
 安装mongo 默认容器网络启动一个名为db的mongo数据库，必须是这个名字，其他的就需要制定mongo链接地址了，详细参考上面 官方使用Docker 部署说明
docker run --name db -d mongo:4.0 --smallfiles --replSet rs0 --oplogSize 128初始化 replicaSet:
docker exec -ti db mongo --eval &amp;quot;printjson(rs.initiate())&amp;quot;安装 RocketChat  -p 3000:3000 第一个3000为物理机端口，第二个为容器端口 &amp;ndash;link db：db即为上面创建的mongo 容器 ROOT_URL=http://110.40.173.22：物理机的ip即外部访问ip  docker run --name rocketchat -p 3000:3000 --link db --env ROOT_URL=http://110.40.173.22 --env MONGO_OPLOG_URL=mongodb://db:27017/local -d rocket.chat</description>
    </item>
    
    <item>
      <title>linux docker 安装</title>
      <link>http://liuchenshuo.com/2022/01/01/linux-docker-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sat, 01 Jan 2022 12:10:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/01/01/linux-docker-%E5%AE%89%E8%A3%85/</guid>
      <description>Linux 安装 Docker  参考资料：https://www.runoob.com/docker/centos-docker-install.html
 CentOS 安装 使用阿里源手动安装： 配置命令：
sudo yum-config-manager \  --add-repo \  http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装命令（需要确认两次下载）：
sudo yum install docker-ce docker-ce-cli containerd.io启动 Docker
sudo systemctl start docker</description>
    </item>
    
    <item>
      <title>开源论坛 NodeBB 安装(使用内网数据库)</title>
      <link>http://liuchenshuo.com/2022/01/01/%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B-nodebb-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Sat, 01 Jan 2022 12:10:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/01/01/%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B-nodebb-%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%91%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>安装NodeBB论坛（数据库内网配置，无权限）  参考：https://www.jianshu.com/p/ab72fe404c8d
其他论坛：Dizuss （PHP）https://www.discuz.net/
 0. 前置准备  安装docker：参考 http://liuchenshuo.com/2022/01/01/linux-docker-安装  1. 安装 mongoBD  备份数据库操作：https://www.cnblogs.com/woshimrf/p/docker-install-mongodb-and-backup.html
 先创建所需的 docker 网络 docker network create mongo-net 创建了一个名字为mongo-net的默认网络
可以通过命令：docker network list 查看是否创建成功，创建成果结果如下：
NETWORK ID NAME DRIVER SCOPE78a4240d5b93 bridge bridge localb93f96ae1e20 host host localfd99a9463343 mongo-net bridge localee1974ed8911 none null local安装 mongodb
不使用权限，内部网络数据库，现阶段使用
 docker run \--name mongo \--restart always \--network mongo-net \-p 27017:27017 \-v /data/opt/mongodb/data/configdb:/data/configdb/ \-v /data/opt/mongodb/data/db/:/data/db/ \-d mongo:4.</description>
    </item>
    
    <item>
      <title>开源论坛 NodeBB 安装（数据库配置权限）</title>
      <link>http://liuchenshuo.com/2022/01/01/%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B-nodebb-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90/</link>
      <pubDate>Sat, 01 Jan 2022 12:10:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/01/01/%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B-nodebb-%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93%E9%85%8D%E7%BD%AE%E6%9D%83%E9%99%90/</guid>
      <description>安装NodeBB论坛（数据库配置权限）  参考：https://www.jianshu.com/p/ab72fe404c8d
其他论坛：Dizuss （PHP）https://www.discuz.net/
 0. 前置准备  安装docker：参考 http://liuchenshuo.com/2022/01/01/linux-docker-安装  1. 安装 mongoBD  备份数据库操作：https://www.cnblogs.com/woshimrf/p/docker-install-mongodb-and-backup.html
 先创建所需的 docker 网络 docker network create mongo-net 创建了一个名字为mongo-net的默认网络
可以通过命令：docker network list 查看是否创建成功，创建成果结果如下：
NETWORK ID NAME DRIVER SCOPE78a4240d5b93 bridge bridge localb93f96ae1e20 host host localfd99a9463343 mongo-net bridge localee1974ed8911 none null local安装 mongodb
使用权限（当前测试连接有问题）
创建数据库
 主机映射路径在没有的情况下会自动创建：-v /data/opt/mongodb/data/configdb:/data/configdb/  物理机目录是前面的：/data/opt/mongodb/data/configdb 容器映射目录是：/data/configdb/     docker run \--name mongo \--restart always \--network mongo-net \-p 27017:27017 \-v /data/opt/mongodb/data/configdb:/data/configdb/ \-v /data/opt/mongodb/data/db/:/data/db/ \-d mongo:4.</description>
    </item>
    
    <item>
      <title>开源论坛 NodeBB 配置</title>
      <link>http://liuchenshuo.com/2022/01/01/%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B-nodebb-%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 01 Jan 2022 12:10:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2022/01/01/%E5%BC%80%E6%BA%90%E8%AE%BA%E5%9D%9B-nodebb-%E9%85%8D%E7%BD%AE/</guid>
      <description>NodeBB论坛，初始化后一些简单配置说明 管理员登录后，点击首页图标最后一个即可进入管理员界面
 设置语言为中文 SETTING -&amp;gt; Languages 选择 简体中文，点击页面右下角的保存按钮进行保存，然后刷新界面 可以看到已经变成中文格式 修改网站主体：名称、图标等 设置 -&amp;gt; 基本  补充中&amp;hellip;</description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范--03数据类型</title>
      <link>http://liuchenshuo.com/2021/07/09/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-03%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Fri, 09 Jul 2021 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/07/09/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-03%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;03数据类型  学习参考链接 https://wangdoc.com/javascript/types/general.html
 概述 六种基本类型
 数值（number）：整数以及小数，例如：1; 3.14。 字符串（string）：文本，例如 hello。 布尔值（boolean）：表示真伪，两个取值true; false。 undefined：表示未定义或不存在。 null：表示空值。 对象（object）：各种值的集合。  对象可以细分为三个子类
 狭义对象（object） 数组（array） 函数（function）  由于函数可以作为一种类型，为支持函数式编程提供了基础。
typeof 运算符 返回对象类型，特殊的 null 类型是 object，这个是由于历史原因，null是后来作为一种特殊数据类型。</description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范--04 运算符</title>
      <link>http://liuchenshuo.com/2021/07/09/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-04-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Fri, 09 Jul 2021 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/07/09/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%83-04-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;04 运算符  学习参考链接 https://wangdoc.com/javascript/operators/arithmetic.html
 算数运算符 运算符种类  加法运算符：x + y 减法运算符： x - y 乘法运算符： x * y 除法运算符：x / y 指数运算符：x ** y 余数运算符：x % y 自增运算符：++x 或者 x++ 自减运算符：--x 或者 x-- 数值运算符： +x 负数值运算符：-x  加法运算符 允许非数值相加布尔型相加会转换成数字
true + true // 2重载 除了加法运算符，其他算术运算符（比如减法、除法和乘法）都不会发生重载。它们的规则是：所有运算子一律转为数值，再进行相应的数学运算。
1 - &#39;2&#39; // -11 * &#39;2&#39; // 21 / &#39;2&#39; // 0.5比较运算符 JavaScript 一共提供了8个比较运算符。
 &amp;gt; 大于运算符 &amp;lt; 小于运算符 &amp;lt;= 小于或等于运算符 &amp;gt;= 大于或等于运算符 == 相等运算符 === 严格相等运算符 !</description>
    </item>
    
    <item>
      <title>vue快速开发指导</title>
      <link>http://liuchenshuo.com/2021/06/27/vue%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E6%8C%87%E5%AF%BC/</link>
      <pubDate>Sun, 27 Jun 2021 08:05:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/06/27/vue%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E6%8C%87%E5%AF%BC/</guid>
      <description>vue 快速开发指导 这里写的vue基础适合有前端基础的人尤其适合使用过其他框架例如react，对于前端没有基础的请先学习html以及js相关基础知识。
这里的基础知识，都是一些开发常识，适用于快速入门，或者开发的参考。
1 vue 组件变量说明  参考：https://blog.csdn.net/yangfengjueqi/article/details/86536347
 加冒号：或者@ 以及 v-bind、v-on作用
2 父子组件互相传参  参考：https://www.jianshu.com/p/af9cb05bfbaf
 父组件传参给子组件 子组件向父组件返回数据 3 子组件随父组件参数改变进行刷新 </description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范——00 示例文档</title>
      <link>http://liuchenshuo.com/2021/05/21/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%8300-%E7%A4%BA%E4%BE%8B%E6%96%87%E6%A1%A3/</link>
      <pubDate>Fri, 21 May 2021 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/05/21/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%8300-%E7%A4%BA%E4%BE%8B%E6%96%87%E6%A1%A3/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;00 基本语法  学习参考链接 https://wangdoc.com/javascript/basic/grammar.html
 JavaScript 的基本语法 </description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范——02 基本语法</title>
      <link>http://liuchenshuo.com/2021/05/21/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%8302-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 21 May 2021 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/05/21/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%8302-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;02 基本语法  学习参考链接 https://wangdoc.com/javascript/basic/grammar.html
 语句 一般情况下，JavaScript程序的一行就是一个语句。
变量 var a =1;
  变量只有声明 var a; 没有赋值情况下，变量值都是 undefined 。
  JavaScript 是动态类型语言，变量类型没有限制，可以随时更改类型。
  注意变量提升，JavaScript 引擎工作方式，先解析代码，获得所有的声明变量，然后逐行执行，会导致所有变量语句都被提升到代码头部。
console.log(a);var a = 1;不会报错，实际执行为：var a;console.log(a);a = 1;  标识符 大小写敏感，中文也是合法字符
注释 // 1.单行注释/*2.多行注释*/&amp;lt;!-- 3.也是支持的 --&amp;gt;区块 使用大括号构成区块，不过var区块外也生效
{ var a= 1}console.log(a) // 1条件语句 支持 if else以及switch</description>
    </item>
    
    <item>
      <title>深入理解Java虚拟机--第一章 走进java</title>
      <link>http://liuchenshuo.com/2021/05/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%B5%B0%E8%BF%9Bjava/</link>
      <pubDate>Wed, 05 May 2021 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/05/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%B5%B0%E8%BF%9Bjava/</guid>
      <description>深入理解Java虚拟机&amp;ndash;第一章 走进java   世界上没有完美的程序，但是我们并不因此而沮丧，因为写程序本来就是一个不断追求完美的过程。
  JDK: Java Development Kit. 开发库
  JRE: Java Runtime Environment. 运行库
  JAVA当前版本维护：
每六个JDK大版本中才会被划出一个长期支持（Long Term Support，LTS）版，只有LTS版的JDK能够获得为期三年的支持和更新，普通版的JDK就只有短短六个月的生命周期。JDK 8和JDK 11会是LTS版，再下一个就到2021年发布的JDK 17了。
  虚拟机 HotSpot VM  Classic VM 第一个JVM 一直到 JDK1.4 Exact VM 没能够商用 HostSpot VM 从JDK1.2开始使用 当前使用范围最广的虚拟机 Mobile/Embedded VM 手机端使用 BEA JRockit/IBM J9 VM 其他公司虚拟机 &amp;hellip;&amp;hellip;  无语言倾向发展 2018年4月，Oracle Labs新公开了一项黑科技：Graal VM，它的口号“Run Programs Faster Anywhere” 不仅仅支持java还支持其他多种语言。
经过一系列的重构与开放，HotSpot虚拟机逐渐从时间的侵蚀中挣脱出来，虽然代码复杂度还在增长，体积仍在变大，但其架构并未老朽，而是拥有了越来越多的开放性和扩展性，使得HotSpot成为一个能够联动外部功能，能够应对各种场景，能够学会十八般武艺的身手灵活敏捷的“胖子”。
next Page 51</description>
    </item>
    
    <item>
      <title>es5规范以及DOM规范——01 入门介绍</title>
      <link>http://liuchenshuo.com/2021/04/11/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%8301-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sun, 11 Apr 2021 09:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/04/11/es5%E8%A7%84%E8%8C%83%E4%BB%A5%E5%8F%8Adom%E8%A7%84%E8%8C%8301-%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</guid>
      <description>ES5 以及 DOM 规范&amp;ndash;01 入门介绍  学习参考链接 https://wangdoc.com/javascript/
 浏览器的控制台console是可以敲代码运行的，shift + enter 是换行。
JavaScript语言优缺点：《JavaScript: The Good Parts》
语言的产生 1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版。它是一个大杂烩，语法有多个来源。
 基本语法：借鉴 C 语言和 Java 语言。 数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。 函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。 原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。 正则表达式：借鉴 Perl 语言。 字符串和数组处理：借鉴 Python 语言。  JavaScript 的编程风格是函数式编程和面向对象编程的一种混合体。
个重要时间节点   2009年，Node.js 项目诞生，创始人为 Ryan Dahl，它标志着 JavaScript 可以用于服务器端编程，从此网站的前端和后端可以使用同一种语言开发。并且，Node.js 可以承受很大的并发流量，使得开发某些互联网大规模的实时应用变得容易。
  2010年，三个重要的项目诞生，分别是 NPM、BackboneJS 和 RequireJS，标志着 JavaScript 进入模块化开发的时代。
  2012年，单页面应用程序框架（single-page app framework）开始崛起，AngularJS 项目，是一款构建用户界面的前端JS框架，后为Google所收购。同时 Ember 项目也发布了1.</description>
    </item>
    
    <item>
      <title>es6规范</title>
      <link>http://liuchenshuo.com/2021/04/11/es6%E8%A7%84%E8%8C%83/</link>
      <pubDate>Sun, 11 Apr 2021 08:05:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/04/11/es6%E8%A7%84%E8%8C%83/</guid>
      <description>ES6 规范  学习参考链接 https://wangdoc.com/es6/
 </description>
    </item>
    
    <item>
      <title>计算机网络基础</title>
      <link>http://liuchenshuo.com/2021/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Sat, 10 Apr 2021 21:03:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</guid>
      <description>计算机网络 第一章 概述 更新中&amp;hellip;</description>
    </item>
    
    <item>
      <title>Nginx linux 安装</title>
      <link>http://liuchenshuo.com/2021/02/14/nginx-linux-%E5%AE%89%E8%A3%85/</link>
      <pubDate>Sun, 14 Feb 2021 20:06:22 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/02/14/nginx-linux-%E5%AE%89%E8%A3%85/</guid>
      <description>Linux 安装 Nginx CentOs 安装 yum install nginx Linux 安装 apt install nginx 配置文件位置 通过系统命令安装的会默认生成到 /etc/nginx
其他的配置 目录中的 nginx.conf 即可。
Nginx 基本命令 nginx -s reload //修改完成后重加载配置文件 nginx -t //检查修改后的nginx配置 systemctl start nginx //启动 nginx 服务 systemctl status nginx //检查 nginx 服务的运行情况 systemctl restart nginx //重启 nginx 服务 其他配置   配置支持https
在服务器目录 /etc/nginx 中生成私钥: openssl genrsa -out rulenuts.key. 根据私钥生成证书（公钥）: openssl req -new -x509 -key rulenuts.key -out rulenuts.crt.   本地支持hugo静态网页配置示例</description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>http://liuchenshuo.com/2021/02/12/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Fri, 12 Feb 2021 12:10:51 +0200</pubDate>
      
      <guid>http://liuchenshuo.com/2021/02/12/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>使用Hugo搭建个人博客 写在前面
个人博客项目有很多
  wordpress（php编写）
  gitBook（git hub支持）
  hugo（go编写）
  &amp;hellip;&amp;hellip;.
  其实博客项目一般不需要自己修改源码，自己需要深度定制除外。这里因为仅仅需要存放一些个人md文档，所以在gitBook以及hugo之间进行选择，gitBook界面比较近简单，这里就选取了hugo。
Hugo介绍  英文官方文档：https://gohugo.io/overview/introduction/
中文官方文档：https://www.gohugo.org/
皮肤列表：https://github.com/spf13/hugoThemes
 Hugo是由Go语言实现的静态网站生成器。简单、易用、高效、易扩展、快速部署。
最喜欢的一点是：博客文章可以以文本文件的方式（MarkDown）在本地维护管理，不需要像之前那样在网页的编辑器里提交到网站数据库。你可以方便的使用github管理你的博客文章，不会丢失，又能追溯到每一次的内容变更。
搭建过程 （Windows） 下载安装包并安装  git上的最新地址：https://github.com/gohugoio/hugo/releases
0.80版本Windows百度云：
 下载正常版本即可，对应的extended版本还没搞懂有什么特别的。
下载的是对应的压缩包，解压后进入，不知道是不是我点击exe没有安装，还是就不会安装，我这里将hugo.exe添加到了系统环境变量path中（重启计算机生效）这样hugo命令在cmd中才会生效，当然进入到hugo.exe的文件夹，输入cmd打开命令行也可以，不过后面操作有的就需要输入绝对路径了
生成站点 使用Hugo快速生成站点，比如希望生成到G:\workspace\hugo 路径：
hugo new site G:\workspace\hugo 成功后会有提示：Congratulations! Your new Hugo site is created in G:\workspace\hugo.
这样就在  G:\workspace\hugo. 目录里生成了初始站点，进去目录：
cd G:\workspace\hugo 站点目录结构：
 ▸ archetypes/▸ content/▸ static/▸ layouts/▸ static/▸ themes/config.</description>
    </item>
    
  </channel>
</rss>
